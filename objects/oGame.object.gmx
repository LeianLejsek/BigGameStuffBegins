<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sGame</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stablish Game mode
PLATFORMER = 7;
BATTLE = 8;

TURNATTACKP = 9;
TURNATTACKE = 10;
TURNREST = 12;
INITIATE = 13;

GameMode = PLATFORMER;
BattleState = noone;

BattleAreaR = noone;
BattleAreaL = noone;
BattleAreaW = noone;

BattleAreaT = noone;
BattleAreaB = noone;
BattleAreaH = noone;

InitializingBattle = false;
PlayerReady = false;
EnemyReady = false;

FirstEnemy = noone;
Enemies[0] = noone;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Camera
camera = instance_create(x, y, oCamera);

view_enabled = true;

with(camera){
    ViewPlatform = 0;
    ViewBattle = 1;
    
    ViewPlatformW = 640;
    ViewPlatformH = 360;

    view_wview[ViewPlatform] = ViewPlatformW;
    view_hview[ViewPlatform] = ViewPlatformH;
    view_hborder[ViewPlatform] = ViewPlatformW/2;
    view_vborder[ViewPlatform] = ViewPlatformH/2;
    
    ViewBattleW = 270;
    ViewBattleH = 162;
    
    view_wview[ViewBattle] = ViewBattleW;
    view_hview[ViewBattle] = ViewBattleH;
    view_hborder[ViewBattle] = ViewBattleW/2;
    view_vborder[ViewBattle] = ViewBattleH/2;
    
    view_object[ViewPlatform] = self;
    view_object[ViewBattle] = self;
    
    view_visible[ViewPlatform] = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug controlls and options

// Input variables for debug room traversal
var kRestart, kExit, kPrev, kNext;

kRestart = keyboard_check_pressed(ord('R'));
kExit    = keyboard_check_pressed(vk_escape);
kPrev    = keyboard_check_pressed(vk_subtract);
kNext    = keyboard_check_pressed(vk_add);

kLeaveBattle = keyboard_check_pressed(vk_tab);

if (kRestart)
    room_restart();
if (kExit)
    game_end();
    
if (kLeaveBattle &amp;&amp; GameMode == BATTLE) {
    EndBattle();
}
    
// Iterate through rooms backward
if (kPrev) {
    if (room == room_first)
        room_goto(room_last);
    else
        room_goto_previous();
}

// Iterate through rooms forwards
if (kNext) {
    if (room == room_last)
        room_goto(room_first);
    else
        room_goto_next();
}

// Toggle touch controls
if (keyboard_check_pressed(ord('P'))) {
    if (instance_exists(oTouchCompatible))
        with (oTouchCompatible)
            instance_destroy();
    else
        instance_create(0, 0, oTouchCompatible);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Manage game mode
switch( GameMode ){
    case PLATFORMER:
    break;
    case BATTLE:
        //Define battle area
    //Adapt later to accept more enemies
        BattleAreaL = min( oPlayer.bbox_left, FirstEnemy.bbox_left );                                                
        BattleAreaR = max( oPlayer.bbox_right, FirstEnemy.bbox_right );                              
    //Adapt later to accept more enemies
        BattleAreaT = min( oPlayer.bbox_top, FirstEnemy.bbox_top, oPlayer.bbox_bottom, FirstEnemy.bbox_bottom );           //Adapt later to accept more enemies
        BattleAreaB = max( oPlayer.bbox_top, FirstEnemy.bbox_top, oPlayer.bbox_bottom, FirstEnemy.bbox_bottom );
    //Adapt later to accept more enemies
        BattleAreaW = BattleAreaR-BattleAreaL;
        BattleAreaH = BattleAreaB-BattleAreaT;
    
    break;
    default:
        show_debug_message("Mode not defined")
    break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize battle

if( PlayerReady &amp;&amp; EnemyReady ){
    BattleState = TURNREST;
    PlayerReady = false;    
    EnemyReady = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Show debug variables GUI
switch GameMode {
    case PLATFORMER:
        CurrentMode = "Plataformer";
    break;
    case BATTLE:
        CurrentMode = "Battle";
    break;
}

switch BattleState {
    case INITIATE:
        CurrentBState = "Initiating";
    break;
    case TURNREST:
        CurrentBState = "Turn Rest";
    break;
    case TURNATTACKP:
        CurrentBState = "Turn Attack Player";
    break;
    case TURNATTACKE:
        CurrentBState = "Turn Attack Enemy";
    break;
    default:
        CurrentBState = "Noone";
    break;
}


draw_set_colour(c_white);
draw_text( 0, 0, "Game mode: " + CurrentMode + "#Battle state: " + CurrentBState );

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Touch control compatibility
//draw_text(view_xview[0] + 16, view_yview[0] + 16, string("Press 'P' to toggle touch controls on/off"));

if (instance_exists(oTouchCompatible)) {
    draw_sprite(sLeftArrow, 0, view_xview[0] + 16, view_yview[0] + 280);
    draw_sprite(sRightArrow, 0, view_xview[0] + 96, view_yview[0] + 280);   
    draw_sprite(sJumpButton, 0, view_xview[0] + 640 - 64 - 16, view_yview[0] + 280);
    draw_sprite(sAtkButton, 0, view_xview[0] + 640 - 64 - 96, view_yview[0] + 280); 
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Show debug options

if( GameMode == BATTLE &amp;&amp; BattleAreaR != noone ){
    draw_set_colour(c_yellow);
    draw_rectangle_colour( BattleAreaR, BattleAreaT, BattleAreaL, BattleAreaB, c_red, c_red, c_green, c_blue ,1 );
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
